/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     simpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         5000;

deltaT          1;

writeControl    timeStep;

writeInterval   200;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    #includeFunc residuals(p,U,k,omega)

    #includeFunc staticPressure(name=inlet) //[Pa]
    #includeFunc totalPressureIncompressible(name=inlet) //[mˆ2/sˆ2], p/rho
    #includeFunc mag(U)

    Mach
    {
        type            coded;
        libs            ("libutilityFunctionObjects.so");
        name            MachNo;
        executeControl  timeStep;
        writeControl    writeTime;
        codeRead
        #{
            volScalarField* Ma =
                new volScalarField
                (
                    IOobject("Ma", mesh().time().timeName(), mesh()),
                    mesh(),
                    dimensionedScalar(dimless, 0)
                );
            Ma->store();
        #};
        codeExecute
        #{
            // Specific heat ratio and kinematic atmospheric pressure
            const dimensionedScalar gamma(dimless, 1.4);
            const dimensionedScalar pAtm(dimPressure, 101325);
            const dimensionedScalar rho(dimDensity, 1.2);

            // Read fields
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const volScalarField& p = mesh().lookupObject<volScalarField>("p");
            volScalarField& Ma = mesh().lookupObjectRef<volScalarField>("Ma");

            Ma = mag(U)/sqrt(gamma*(p + pAtm/rho));
        #};
        codeWrite
        #{
            mesh().lookupObjectRef<volScalarField>("Ma").write();
        #};
    }

    //TODO: Swirl number calculation using OpenFOAM (instead of ParaView)

    // Write amplutude field values
    read
    {
        type            readFields;
        libs            ("libfieldFunctionObjects.so");
        writeControl    timeStep;
        writeInterval   1;
        fields
        (
            static(p)
            total(p)
        );
    }
    fieldAmplutudes
    {
        type            fieldMinMax;
        libs            ("libfieldFunctionObjects.so");
        writeControl    timeStep;
        writeInterval   1;
        log             true;
        location        false;
        operation       magnitude;
        fields
        (
            p
            static(p)
            total(p)
            U
            Ma
        );
    }
}

// ************************************************************************* //
